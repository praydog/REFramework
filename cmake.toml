# Reference: https://build-cpp.github.io/cmkr/cmake-toml
# to build:
# > cmake -B build
# > cmake --build build --config Release
[project]
name = "reframework"
cmake-after = """
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

# Disable exceptions
# string(REGEX REPLACE "/EHsc" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)
set(DYNAMIC_LOADER ON CACHE BOOL "" FORCE) # OpenXR


if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
    message(NOTICE "Building in Release mode")
endif()
"""

[options]
DEVELOPER_MODE = { value = true, comment = "Enable developer mode" }
REF_BUILD_RE2_SDK = false
REF_BUILD_RE2_TDB66SDK = false
REF_BUILD_RE3_SDK = false
REF_BUILD_RE3_TDB67SDK = false
REF_BUILD_RE4_SDK = false
REF_BUILD_RE7_SDK = false
REF_BUILD_RE7_TDB49SDK = false
REF_BUILD_RE8_SDK = false
REF_BUILD_DMC5_SDK = false
REF_BUILD_MHRISE_SDK = false
REF_BUILD_FRAMEWORK = { value = true, comment = "Enable building the full REFramework" }
REF_BUILD_DEPENDENCIES = { value = true, comment = "Enable building dependencies" }

[conditions]
developer-mode = "DEVELOPER_MODE"
build-framework = "REF_BUILD_FRAMEWORK AND CMAKE_SIZEOF_VOID_P EQUAL 8"
build-re2-sdk = "REF_BUILD_RE2_SDK OR REF_BUILD_FRAMEWORK"
build-re2tdb66-sdk = "REF_BUILD_RE2_TDB66SDK OR REF_BUILD_FRAMEWORK"
build-re3-sdk = "REF_BUILD_RE3_SDK OR REF_BUILD_FRAMEWORK"
build-re3tdb67-sdk = "REF_BUILD_RE3_TDB67SDK OR REF_BUILD_FRAMEWORK"
build-re4-sdk = "REF_BUILD_RE4_SDK OR REF_BUILD_FRAMEWORK"
build-re7-sdk = "REF_BUILD_RE7_SDK OR REF_BUILD_FRAMEWORK"
build-re7tdb49-sdk = "REF_BUILD_RE7_TDB49SDK OR REF_BUILD_FRAMEWORK"
build-re8-sdk = "REF_BUILD_RE8_SDK OR REF_BUILD_FRAMEWORK"
build-dmc5-sdk = "REF_BUILD_DMC5_SDK OR REF_BUILD_FRAMEWORK"
build-mhrise-sdk = "REF_BUILD_MHRISE_SDK OR REF_BUILD_FRAMEWORK"
build-framework-dependencies = "REF_BUILD_DEPENDENCIES AND CMAKE_SIZEOF_VOID_P EQUAL 8"

[fetch-content.asmjit]
git = "https://github.com/asmjit/asmjit.git"
tag = "2a706fd2ba355808cada31ac1eed8ce28caa6b37"

[fetch-content.openxr]
git = "https://github.com/KhronosGroup/OpenXR-SDK"
tag = "458984d7f59d1ae6dc1b597d94b02e4f7132eaba"

[target.spdlog]
type = "static"
sources = ["dependencies/spdlog/src/*.cpp"]
include-directories = ["dependencies/spdlog/include"]
compile-definitions = ["SPDLOG_COMPILED_LIB"]
condition = "build-framework-dependencies"
alias = "spdlog::spdlog"


[target.glm_static]
type = "static"
sources = ["dependencies/glm/glm/**.cpp"]
include-directories = ["dependencies/glm"]
condition = "build-framework-dependencies"

[target.minhook]
type = "static"
sources = ["dependencies/minhook/src/**.c"]
include-directories = [
    "dependencies/minhook/include",
    "dependencies/minhook/src/hde",
]
condition = "build-framework-dependencies"


[target.imgui]
type = "static"
sources = ["dependencies/imgui/*.cpp"]
include-directories = ["dependencies/imgui", "src/re2-imgui"]
compile-definitions = [
    "IMGUI_USER_CONFIG=\"${CMAKE_SOURCE_DIR}/src/re2-imgui/re2_imconfig.hpp\"",
]
condition = "build-framework"

[target.imguizmo]
type = "static"
sources = ["dependencies/imguizmo/*.cpp"]
include-directories = ["dependencies/imgui", "dependencies/imguizmo", "src/re2-imgui"]
compile-definitions = [
    "IMGUI_USER_CONFIG=\"${CMAKE_SOURCE_DIR}/src/re2-imgui/re2_imconfig.hpp\"",
]
condition = "build-framework"

[target.imnodes]
type = "static"
sources = ["dependencies/imnodes/*.cpp"]
include-directories = ["dependencies/imnodes"]
condition = "build-framework"
link-libraries = ["imgui"]

[target.openvr]
type = "interface"
include-directories = ["dependencies/openvr/headers"]
link-libraries = [
    "${CMAKE_SOURCE_DIR}/dependencies/openvr/lib/win64/openvr_api.lib",
]
cmake-after = """
file(COPY dependencies/openvr/lib/win64/openvr_api.lib DESTINATION ${CMAKE_BINARY_DIR}/lib)
file(COPY dependencies/openvr/bin/win64/openvr_api.dll DESTINATION ${CMAKE_BINARY_DIR}/bin)
"""
condition = "build-framework"

[target.lua]
type = "static"
sources = ["dependencies/lua/src/*.c"]
include-directories = ["dependencies/lua/src"]
condition = "build-framework"

[target.sol2]
type = "interface"
include-directories = ["dependencies/sol2/single/include"]
condition = "build-framework"

[target.nlohmann_json]
type = "interface"
include-directories = ["dependencies/nlohmann"]
condition = "build-framework"

[fetch-content.bddisasm]
git = "https://github.com/bitdefender/bddisasm"
tag = "v1.34.10"

[fetch-content.kananlib]
git = "https://github.com/cursey/kananlib"
tag = "main"

[target.utility]
type = "static"
sources = ["shared/utility/**.cpp", "shared/utility/**.c"]
headers = ["shared/utility/**.hpp", "shared/utility/**.h"]
compile-options = ["/EHa"]
compile-features = ["cxx_std_20"]
link-libraries = [
    "spdlog",
    "minhook",
    "kananlib"
]

[template.sdk]
type = "static"
sources = ["shared/sdk/**.cpp", "shared/sdk/**.c"]
headers = ["shared/sdk/**.hpp", "shared/sdk/**.h"]
include-directories = ["shared/", "include/"]
compile-options = ["/EHa"]
compile-features = ["cxx_std_20"]
link-libraries = [
    "glm_static",
    "spdlog"
]
private-link-libraries = [
    "utility"
]

[template.game]
condition = "build-framework"
type = "shared"
sources = ["src/**.cpp", "src/**.c"]
headers = ["src/**.hpp", "src/**.h"]
include-directories = ["shared/", "src/", "include/", "${OPENXR_SOURCE_DIR}/src"]
link-directories = ["dependencies/openvr/lib/win64/"]
compile-options = ["/GS-", "/bigobj", "/EHa"]
compile-features = ["cxx_std_20"]
compile-definitions = ["${CMKR_TARGET}", "REFRAMEWORK_EXPORTS", "REFRAMEWORK_GAME_NAME=\"${CMKR_TARGET}\""]
developer-mode.compile-definitions = ["DEVELOPER"]
link-libraries = [
    "${CMKR_TARGET}SDK",
    "utility",
    "asmjit::asmjit",
    "nlohmann_json",
    "spdlog",
    "lua",
    "sol2",
    "imgui",
    "imguizmo",
    "imnodes",
    "minhook",
    "d3d11",
    "glm_static",
    "shlwapi",
    "openvr",
    "openxr_loader",
    "delayimp",
]

[template.game.properties]
OUTPUT_NAME = "dinput8"
LINK_FLAGS = "/DELAYLOAD:openvr_api.dll /DELAYLOAD:openxr_loader.dll"
RUNTIME_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"

[target.RE2SDK]
type = "sdk"
compile-definitions = ["RE2"]
condition = "build-re2-sdk"

[target.RE2_TDB66SDK]
type = "sdk"
compile-definitions = ["RE2", "RE2_TDB66"]
condition = "build-re2tdb66-sdk"

[target.RE2]
type = "game"

[target.RE2_TDB66]
type = "game"

[target.RE3SDK]
type = "sdk"
compile-definitions = ["RE3"]
condition = "build-re3-sdk"

[target.RE3_TDB67SDK]
type = "sdk"
compile-definitions = ["RE3", "RE3_TDB67"]
condition = "build-re3tdb67-sdk"

[target.RE3]
type = "game"

[target.RE3_TDB67]
type = "game"

[target.RE4]
type = "game"

[target.RE4SDK]
type = "sdk"
compile-definitions = ["RE4", "REENGINE_PACKED", "REENGINE_AT"]
condition = "build-re4-sdk"

[target.RE7SDK]
type = "sdk"
compile-definitions = ["RE7"]
condition = "build-re7-sdk"

[target.RE7_TDB49SDK]
type = "sdk"
compile-definitions = ["RE7", "RE7_TDB49"]
condition = "build-re7tdb49-sdk"

[target.RE7]
type = "game"

[target.RE7_TDB49]
type = "game"

[target.RE8SDK]
type = "sdk"
compile-definitions = ["RE8", "REENGINE_PACKED", "REENGINE_AT"]
condition = "build-re8-sdk"

[target.RE8]
type = "game"

[target.DMC5SDK]
type = "sdk"
compile-definitions = ["DMC5"]
condition = "build-dmc5-sdk"

[target.DMC5]
type = "game"

[target.MHRISESDK]
type = "sdk"
compile-definitions = ["MHRISE", "REENGINE_PACKED", "REENGINE_AT"]
condition = "build-mhrise-sdk"

[target.MHRISE]
type = "game"

[template.plugin]
type = "shared"
include-directories = ["include/"]
compile-features = ["cxx_std_20"]
condition = "build-framework"

[template.plugin.properties]
RUNTIME_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"

[target.example_plugin]
type = "plugin"
sources = ["examples/example_plugin/**.cpp", "examples/example_plugin/**.c"]
headers = ["examples/example_plugin/**.hpp", "examples/example_plugin/**.h"]
link-libraries = [
    "lua",
    "sol2",
    "imgui"
]

[target.weapon_stay_big_plugin]
type = "plugin"
sources = ["examples/weapon_stay_big_plugin/weapon_stay_big.cpp"]
